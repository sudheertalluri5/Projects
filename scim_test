from django.urls import path, include
from django_scim.views import ScimView

urlpatterns = [
    path('scim/v2/', ScimView.as_view()),
    path('api/', include('scim_app.urls')),
]


from django.urls import path
from . import views

urlpatterns = [
    path('users/', views.users_list),
    path('users/<str:id>/', views.users_detail),
    path('groups/', views.groups_list),
    path('groups/<str:id>/', views.groups_detail),
]


from django_scim.views import SCIMAPIView
from django_scim.constants import OPERATION_ADD, OPERATION_REPLACE, OPERATION_REMOVE
from django.http import JsonResponse
import requests
from .utils import build_scim_resource_response

class UserSCIMView(SCIMAPIView):
    def get(self, request, *args, **kwargs):
        # Retrieve users from external REST API
        response = requests.get('https://your_external_rest_api.com/users')
        users = response.json()

        # Build SCIM resource response
        resources = []
        for user in users:
            resources.append(build_scim_resource_response(
                'User',
                user['id'],
                {
                    'userName': user['username'],
                    'name': {
                        'givenName': user['first_name'],
                        'familyName': user['last_name'],
                    },
                    'emails': [
                        {
                            'value': user['email'],
                            'type': 'work',
                            'primary': True,
                        }
                    ],
                }
            ))
        return JsonResponse({'Resources': resources})

    def post(self, request, *args, **kwargs):
        # Parse incoming SCIM request
        data = request.body.decode('utf-8')
        scim_data = json.loads(data)

        # Create user in external REST API
        response = requests.post('https://your_external_rest_api.com/users', json=scim_data)
        user = response.json()

        # Build SCIM resource response
        resource = build_scim_resource_response(
            'User',
            user['id'],
            {
                'userName': user['username'],
                'name': {
                    'givenName': user['first_name'],
                    'familyName': user['last_name'],
                },
                'emails': [
                    {
                        'value': user['email'],
                        'type': 'work',
                        'primary': True,
                    }
                ],
            }
        )
        return JsonResponse({'Resources': [resource]})

    def put(self, request, *args, **kwargs):
        # Parse incoming SCIM request
        data = request.body.decode('utf-8')
        scim_data = json.loads(data)

        # Update user in external REST API
        user_id = kwargs['uuid']
        response = requests.put(f'https://your_external_rest_api.com/users/{user_id}', json=scim_data)
        user = response.json()

        # Build SCIM resource response
        operation = OPERATION_REPLACE if response.status_code == 200 else OPERATION_ADD
        resource = build_scim_resource_response(
            'User',
            user['id'],
            {
                'userName': user['username'],
                'name': {
                    'givenName': user['first_name'],
                    'familyName': user['last_name'],
                },
                'emails': [
                    {
                        'value': user['email'],
                        'type': 'work',
                        'primary': True,
                    }
                ],
            },
            operation=operation,
        )
        return JsonResponse({'Resources': [resource]})

    def patch(self, request, *args, **kwargs):
        # Parse incoming SCIM request
        data = request.body.decode('utf-8')
        scim_data = json.loads(data)

        # Update user in external REST API
        user_id = kwargs['uuid']
        response = requests.patch(f'https://your_external_rest_api.com/users/{user_id}', json=scim_data)
        user = response.json()

        # Build SCIM resource response
        operations = []
        for key, value in scim_data.items():
            op =
